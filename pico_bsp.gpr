with "hal.gpr";
with "rp2040_hal.gpr";

project Pico_BSP is

    for Runtime ("Ada") use "zfp-cortex-m0p";
    for Target use "arm-eabi";

    --  RP2040 requires a .boot2 section in the first 256 bytes of
    --  flash. Ravenscar provides this and a linker script, but ZFP
    --  profiles need to bring their own.
    for Languages use ("Ada", "Asm_Cpp");
    for Source_Dirs use ("src", "zfp_startup");

    Flash_Chip := External ("PICO_BSP_FLASH_CHIP", "w25q080");
    Boot_Stage_2 := Project'Project_Dir & "zfp_startup/boot2_" & Flash_Chip & ".S";
    Linker_Script := Project'Project_Dir & "zfp_startup/memmap_default.ld";
    Linker_Switches := ("-T", Linker_Script, Boot_Stage_2);

    for Library_Name use "pico_bsp";
    for Library_Version use "0.6.0";
    for Library_Dir use "lib";

    for Object_Dir use "obj";
    for Create_Missing_Dirs use "True";

    type Library_Type_Type is ("relocatable", "static", "static-pic");
    Library_Type : Library_Type_Type :=
        external ("PICO_BSP_LIBRARY_TYPE", external ("LIBRARY_TYPE", "static"));
    for Library_Kind use Library_Type;

   type Enabled_Kind is ("enabled", "disabled");
   Compile_Checks : Enabled_Kind := External ("PICO_BSP_COMPILE_CHECKS", "enabled");
   Runtime_Checks : Enabled_Kind := External ("PICO_BSP_RUNTIME_CHECKS", "enabled");
   Style_Checks : Enabled_Kind := External ("PICO_BSP_STYLE_CHECKS", "enabled");
   Contracts_Checks : Enabled_Kind := External ("PICO_BSP_CONTRACTS", "enabled");

   type Build_Kind is ("debug", "optimize");
   Build_Mode : Build_Kind := External ("PICO_BSP_BUILD_MODE", "debug");

   Compile_Checks_Switches := ();
   case Compile_Checks is
      when "enabled" =>
         Compile_Checks_Switches :=
           ("-gnatwa",   -- All warnings
            "-gnatwl",   -- Elaboration warnings
            "-gnatVa",   -- All validity checks
            "-gnatw.X"); -- Hide No_Exception_Propagation warnings
      when others => null;
   end case;

   Runtime_Checks_Switches := ();
   case Runtime_Checks is
      when "enabled" => null;
      when others =>
         Runtime_Checks_Switches :=
           ("-gnatp"); -- Supress checks
   end case;

   Style_Checks_Switches := ();
   case Style_Checks is
      when "enabled" => null;
         Style_Checks_Switches :=
           ("-gnatyg",    -- GNAT Style checks
            "-gnaty-d" ,  -- Disable no DOS line terminators
            "-gnatyM120", -- Maximum line length
            "-gnatyO");   -- Overriding subprograms explicitly marked as such
      when others => null;
   end case;

   Contracts_Switches := ();
   case Contracts_Checks is
      when "enabled" => null;
         Contracts_Switches :=
           ("-gnata"); --  Enable assertions and contracts
      when others =>
   end case;

   Build_Switches := ();
   case Build_Mode is
      when "optimize" =>
         Build_Switches := ("-O3",     -- Optimization
                            "-gnatn"); -- Enable inlining
      when "debug" =>
         Build_Switches := ("-g",   -- Debug info
                            "-Og"); -- No optimization
   end case;

   package Compiler is
      for Default_Switches ("Ada") use
        Compile_Checks_Switches &
        Build_Switches &
        Runtime_Checks_Switches &
        Style_Checks_Switches &
        Contracts_Switches &
        ("-gnatQ",              -- Don't quit. Generate ALI and tree files even if illegalities
         "-fstack-usage",       -- output stack usage information
         "-ffunction-sections", -- Separate ELF section for each function
         "-fdata-sections");    -- Separate ELF section for each variable
   end Compiler;

end Pico_BSP;
